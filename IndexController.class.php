<?php
 namespace Home\Controller; use Org\Util\Date; use Think\Controller; class IndexController extends Controller { public function index () { $cookieVal = cookie('username'); if ($cookieVal) { $user = M('user'); $result = $user->where("username = '%s'", $cookieVal)->select(); if ($result) { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $user = M('department'); $departmentList = $user->select(); $this->assign('departmentList', $departmentList); $this->assign('username', $result[0]['username']); $this->display(); } else { $this->display('login'); } } else { $this->display('login'); } } public function login () { $this->display(); } public function logincheck () { if (IS_POST) { $user = M('user'); $username = $_POST['username']; $password = md5($_POST['password']); $result = $user->where("username = '%s' and password = '%s'", array($username, $password))->select(); if ($result) { cookie('username', $username, 3600); $this->success("登录成功", U("Home/Index/index"), 1); } else { $ips = get_client_ip(); $ip = new \Org\Net\IpLocation('UTFWry.dat'); $ares = $ip->getlocation($ips); $login_log['username'] = $_POST['username']; $login_log['password'] = $_POST['password']; $login_log['area'] = $ares['country']; $user = M('login_log'); $user->add($login_log); $this->error("login fail(账号或密码错误)", U("Home/Index/login"), 1); } } } public function ready ($id = null) { $this->access(); $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $this->assign('id', $id); switch ($id) { case 1: $result = $this->checkCountData('nk'); $nameList = $this->checkCountMonth('nk'); $userSort = $this->currUserSort('nk', $nameList); $currUserSortRese = $this->currUserSortRese('nk', $nameList); $yesterUserSortArrival = $this->yesterUserSortRese('nk', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('nk', $nameList); $checkCountRese = $this->checkCountRese('nk'); $this->assign('item', '/ 广元协和医院男科'); break; case 2: $result = $this->checkCountData('fk'); $nameList = $this->checkCountMonth('fk'); $userSort = $this->currUserSort('fk', $nameList); $currUserSortRese = $this->currUserSortRese('fk', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('fk', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('fk', $nameList); $checkCountRese = $this->checkCountRese('fk'); $this->assign('item', '/ 广元协和医院妇科'); break; case 3: $result = $this->checkCountData('byby'); $nameList = $this->checkCountMonth('byby'); $userSort = $this->currUserSort('byby', $nameList); $currUserSortRese = $this->currUserSortRese('byby', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('byby', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('byby', $nameList); $checkCountRese = $this->checkCountRese('byby'); $this->assign('item', '/ 广元协和不孕不育科'); break; case 4: $result = $this->checkCountData('other'); $nameList = $this->checkCountMonth('other'); $userSort = $this->currUserSort('other', $nameList); $currUserSortRese = $this->currUserSortRese('other', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('other', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('other', $nameList); $checkCountRese = $this->checkCountRese('other'); $this->assign('item', '/ 广元协和医院其他'); break; case 5: $result = $this->checkCountData('jhsy'); $nameList = $this->checkCountMonth('jhsy'); $userSort = $this->currUserSort('jhsy', $nameList); $currUserSortRese = $this->currUserSortRese('jhsy', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('jhsy', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('jhsy', $nameList); $checkCountRese = $this->checkCountRese('jhsy'); $this->assign('item', '/ 广元协和医院计划生育科'); break; case 6: $result = $this->checkCountData('gck'); $nameList = $this->checkCountMonth('gck'); $userSort = $this->currUserSort('gck', $nameList); $currUserSortRese = $this->currUserSortRese('gck', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('gck', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('gck', $nameList); $checkCountRese = $this->checkCountRese('gck'); $this->assign('item', '/ 广元协和医院肛肠科'); break; case 7: $result = $this->checkCountData('wcwk'); $nameList = $this->checkCountMonth('wcwk'); $userSort = $this->currUserSort('wcwk', $nameList); $currUserSortRese = $this->currUserSortRese('wcwk', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('wcwk', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('wcwk', $nameList); $checkCountRese = $this->checkCountRese('wcwk'); $this->assign('item', '/ 广元协和医院微创外科'); break; case 8: $result = $this->checkCountData('rxk'); $nameList = $this->checkCountMonth('rxk'); $userSort = $this->currUserSort('rxk', $nameList); $currUserSortRese = $this->currUserSortRese('rxk', $nameList); $yesterUserSortArrival = $this->yesterUserSortArrival('rxk', $nameList); $yesterUserSortRese = $this->yesterUserSortRese('rxk', $nameList); $checkCountRese = $this->checkCountRese('rxk'); $this->assign('item', '/ 广元协和医院乳腺科'); break; default: $this->assign('item', '/ 未选择医院'); $this->display(); break; } if ($id) { $this->assign('result', $result); $this->assign('nameList', $nameList); $this->assign('userSort', $userSort); $this->assign('currUserSortRese', $currUserSortRese); $this->assign('yesterUserSortArrival', $yesterUserSortArrival); $this->assign('yesterUserSortRese', $yesterUserSortRese); $this->assign('checkCountRese', $checkCountRese); $this->display(); } else { return false; } } private function currUserSort ($table, $user) { $Model = new \Think\Model(); for ($i = 0; $i < count($user); $i ++) { $countMonth[$user[$i]['username']] = $Model->query("SELECT COUNT(*) AS count, expert FROM $table WHERE expert = '{$user[$i]['username']}' AND status = 1 AND  DATE_FORMAT(oldDate, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')"); } foreach ($countMonth as $key => $val) { foreach ($val as $k => $v) { $userSort[] = $v; } } array_multisort(array_column($userSort, 'count'), SORT_DESC, $userSort); return $userSort; } private function currUserSortRese ($table, $user) { $Model = new \Think\Model(); for ($i = 0; $i < count($user); $i ++) { $countMonth[$user[$i]['username']] = $Model->query("SELECT COUNT(*) AS count, expert FROM $table WHERE expert = '{$user[$i]['username']}' AND status = 3 AND  DATE_FORMAT(oldDate, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')"); } foreach ($countMonth as $key => $val) { foreach ($val as $k => $v) { $currUserSortRese[] = $v; } } array_multisort(array_column($currUserSortRese, 'count'), SORT_DESC, $currUserSortRese); return $currUserSortRese; } private function yesterUserSortArrival ($table, $user) { $Model = new \Think\Model(); for ($i = 0; $i < count($user); $i ++) { $countMonth[$user[$i]['username']] = $Model->query("SELECT COUNT(*) AS count, expert FROM $table WHERE expert = '{$user[$i]['username']}' AND status = 1 AND PERIOD_DIFF(DATE_FORMAT(NOW(),'%Y%m'), DATE_FORMAT(oldDate,'%Y%m')) = 1"); } foreach ($countMonth as $key => $val) { foreach ($val as $k => $v) { $yesterUserSortArrival[] = $v; } } array_multisort(array_column($yesterUserSortArrival, 'count'), SORT_DESC, $yesterUserSortArrival); return $yesterUserSortArrival; } private function yesterUserSortRese ($table, $user) { $Model = new \Think\Model(); for ($i = 0; $i < count($user); $i ++) { $countMonth[$user[$i]['username']] = $Model->query("SELECT COUNT(*) AS count, expert FROM $table WHERE expert = '{$user[$i]['username']}' AND status = 3 AND PERIOD_DIFF(DATE_FORMAT(NOW(),'%Y%m'), DATE_FORMAT(oldDate,'%Y%m')) = 1"); } foreach ($countMonth as $key => $val) { foreach ($val as $k => $v) { $yesterUserSortRese[] = $v; } } array_multisort(array_column($yesterUserSortRese, 'count'), SORT_DESC, $yesterUserSortRese); return $yesterUserSortRese; } public function showTab ($id = null, $pageIndex = 1) { $this->access(); $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (!$this->accSystem('yydj')) { $this->display('notSystemAccess'); exit; } switch ($id) { case 1: $user = M('nk'); $this->assign('table', 'nk'); $this->assign('tableFont', '广元协和医院男科'); break; case 2: $user = M('fk'); $this->assign('table', 'fk'); $this->assign('tableFont', '广元协和医院妇科'); break; case 3: $user = M('byby'); $this->assign('table', 'byby'); $this->assign('tableFont', '广元协和医院不孕不育'); break; case 4: $user = M('other'); $this->assign('table', 'other'); $this->assign('tableFont', '广元协和医院其他'); break; case 5: $user = M('jhsy'); $this->assign('table', 'jhsy'); $this->assign('tableFont', '广元协和医院计划生育'); break; case 6: $user = M('gck'); $this->assign('table', 'gck'); $this->assign('tableFont', '广元协和医院肛肠科'); break; case 7: $user = M('wcwk'); $this->assign('table', 'wcwk'); $this->assign('tableFont', '广元协和医院微创外科'); break; case 8: $user = M('rxk'); $this->assign('table', 'rxk'); $this->assign('tableFont', '广元协和医院乳腺科'); break; default: echo "找不到表格,可能是表格id未找到"; break; } $arrival = $user->where("status = 1")->count('id'); $notArrival = $user->where("status != 1")->count('id'); $pageSize = 50; $data = $user->limit(($pageIndex - 1) * $pageSize, $pageSize)->order('id desc')->select(); $dataCount = $user->count("id"); $total_pages = ceil($dataCount/$pageSize); $pagePath = C(PAGE_SELF); if ($pageIndex > 1) { $prev = "<a href=". $pagePath . '/id/' . $id . '/pageIndex/' . ($pageIndex - 1) .">上一页</a>"; $home = "<a href=". $pagePath . '/id/' . $id . "/pageIndex/1>首页</a>"; } if ($pageIndex < $total_pages) { $next = "<a href=". $pagePath . '/id/' . $id . '/pageIndex/' . ($pageIndex + 1) .">下一页</a>"; $last_page = "<a href=" . $pagePath . '/id/' . $id . '/pageIndex/' . $total_pages .">尾页</a>"; } $diseases = $user->table("alldiseases")->where("pid = $id")->field("diseases")->select(); for ($i = 0; $i < count($data); $i ++) { $address = $user->table("fromaddress")->where("pid = {$data[$i]['fromAddress']}")->select(); $status = $user->table("status")->where("pid = {$data[$i]['status']}")->select(); $data[$i]['diseases'] = $diseases[$data[$i]['diseases']]['diseases']; $data[$i]['fromAddress'] = $address[0]['fromaddress']; $data[$i]['status'] = $status[0]['status']; if ($data[$i]['switch'] == 'on') { $data[$i]['switch'] = '本市'; } else { $data[$i]['switch'] = '其他'; } } $this->assign('arrival', $arrival); $this->assign('notArrival', $notArrival); $this->assign('dataCount', $dataCount); $this->assign('total_pages', $total_pages); $this->assign('pageSize', $pageSize); $this->assign('pageIndex', $pageIndex); $this->assign('next', $next); $this->assign('prev', $prev); $this->assign('home', $home); $this->assign('last_page', $last_page); $this->assign('data', $data); $this->display(); } public function insertShow ($id = null) { $this->access(); $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (is_null($id)) return false; $user = M('alldiseases'); $diseases = $user->where("pid = $id")->field("diseases")->select(); $address = $user->table('fromaddress')->select(); $status = $user->table('status')->select(); $this->assign('diseases', $diseases); $this->assign('address', $address); $this->assign('status', $status); $this->assign('id', $id); switch ($id) { case 1: $this->assign('item', '广元协和医院男科预约信息添加'); break; case 2: $this->assign('item', '广元协和医院妇科预约信息添加'); break; case 3: $this->assign('item', '广元协和不孕不育科预约信息添加'); break; case 4: $this->assign('item', '广元协和医院其他预约信息添加'); break; case 5: $this->assign('item', '广元协和医院计划生育科预约信息添加'); break; case 6: $this->assign('item', '广元协和医院肛肠科预约信息添加'); break; case 7: $this->assign('item', '广元协和医院微创外科预约信息添加'); break; case 8: $this->assign('item', '广元协和医院乳腺科预约信息添加'); break; default: $this->assign('item', '未选择医院'); $this->display(); break; } $this->display(); } public function loginOut () { $cookieVal = cookie('username'); cookie('username', null); $cookieVal = cookie('username'); if ($cookieVal == null) { echo 1; } else { echo 0; } } public function search ($id) { $this->access(); $staticPath = C(STATIC_PATH); $this->assign("staticPath", $staticPath); if (!$this->accSystem('yydj')) { $this->display('notSystemAccess'); exit; } switch ($id) { case 1: $this->assign('table', 'nk'); $this->assign('tableFont', '广元协和医院男科'); break; case 2: $this->assign('table', 'fk'); $this->assign('tableFont', '广元协和医院妇科'); break; case 3: $this->assign('table', 'byby'); $this->assign('tableFont', '广元协和医院不孕不育'); break; case 4: $this->assign('table', 'other'); $this->assign('tableFont', '广元协和医院其他'); break; case 5: $this->assign('table', 'jhsy'); $this->assign('tableFont', '广元协和医院计划生育'); break; case 6: $this->assign('table', 'gck'); $this->assign('tableFont', '广元协和医院肛肠科'); break; case 7: $this->assign('table', 'wcwk'); $this->assign('tableFont', '广元协和医院微创外科'); break; case 8: $this->assign('table', 'rxk'); $this->assign('tableFont', '广元协和医院乳腺科'); break; default: echo "找不到表格,可能是表格id未找到"; break; } $this->assign('id', $id); $this->display(); } public function checkPeople ($field = null, $table, $id = null, $pageIndex = 1) { $this->access(); if (IS_POST) { $field = $_POST['name']; } if (is_null($id)) return false; if (is_string($field)) { $user = M($table); $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); } $pageSize = 50; $like['name'] = array('like', "%". $field ."%"); $result = $user->where($like)->limit(($pageIndex - 1) * $pageSize, $pageSize)->order('id desc')->select(); $dataCount = $user->where("name = '$field'")->count(); $total_pages = ceil($dataCount/$pageSize); $pagePath = C(PAGE_SEARCH); if ($pageIndex > 1) { $prev = "<a href=". $pagePath . '/field/' . $field . '/table/' . $table . '/id/' . $id . '/pageIndex/' . ($pageIndex - 1) .">上一页</a>"; $home = "<a href=". $pagePath . '/field/' . $field . '/table/' . $table . '/id/' . $id . "/pageIndex/1>首页</a>"; } if ($pageIndex < $total_pages) { $next = "<a href=". $pagePath . '/field/' . $field . '/table/' . $table . '/id/' . $id . '/pageIndex/' . ($pageIndex + 1) .">下一页</a>"; $last_page = "<a href=" . $pagePath . '/field/' . $field . '/table/' . $table . '/id/' . $id . '/pageIndex/' . $total_pages .">尾页</a>"; } $arrival = $user->where("name = '$field' and status = 1")->count(); $notArrival = $user->where("name = '$field' and status != 1")->count(); $diseases = $user->table("alldiseases")->where("pid = $id")->field("diseases")->select(); for ($i = 0; $i < count($result); $i ++) { $address = $user->table("fromaddress")->where("pid = {$result[$i]['fromAddress']}")->select(); $status = $user->table("status")->where("pid = {$result[$i]['status']}")->select(); $result[$i]['diseases'] = $diseases[$result[$i]['diseases']]['diseases']; $result[$i]['fromAddress'] = $address[0]['fromaddress']; $result[$i]['status'] = $status[0]['status']; if ($result[$i]['switch'] == 'on') { $result[$i]['switch'] = '本市'; } else { $result[$i]['switch'] = '其他'; } } $this->assign('dataCount', $dataCount); $this->assign('pageIndex', $pageIndex); $this->assign('total_pages', $total_pages); $this->assign('pageSize', $pageSize); $this->assign('pageIndex', $pageIndex); $this->assign('next', $next); $this->assign('prev', $prev); $this->assign('home', $home); $this->assign('last_page', $last_page); $this->assign('arrival', $arrival); $this->assign('notArrival', $notArrival); $this->assign('result', $result); $this->assign('field', $field); $this->assign('table', $table); $this->display(); } public function monthData () { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $this->access(); if (!$this->accSystem('yqs')) { $this->display('notSystemAccess'); exit; } $this->display(); } private function checkCountData ($table = null) { $this->access(); if (is_null($table)) return false; $dataCount = array(); $Model = new \Think\Model(); $terday = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE to_days(oldDate) = to_days(now())"); $terdayArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE to_days(oldDate) = to_days(now()) AND status = 1"); $terdayOutArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE to_days(oldDate) = to_days(now()) AND status != 1"); $yesterday = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE to_days(NOW()) - TO_DAYS(oldDate) = 1"); $yesterdayArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE to_days(NOW()) - TO_DAYS(oldDate) = 1 AND status = 1"); $yesterdayOutArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE to_days(NOW()) - TO_DAYS(oldDate) = 1 AND status != 1"); $tommorday = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE TO_DAYS(oldDate) - TO_DAYS(NOW()) = 1"); $currMonth = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE DATE_FORMAT(oldDate, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')"); $currMonthArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE DATE_FORMAT(oldDate, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') AND status = 1"); $currMonthOutArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE DATE_FORMAT(oldDate, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m') AND status != 1"); $yesterMonth = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE PERIOD_DIFF(DATE_FORMAT(NOW(),'%Y%m'), DATE_FORMAT(oldDate,'%Y%m')) = 1"); $yesterMonthArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE PERIOD_DIFF(DATE_FORMAT(NOW(), '%Y%m'), DATE_FORMAT(oldDate, '%Y%m')) = 1 AND status = 1"); $yesterMonthOutArrived = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE PERIOD_DIFF(DATE_FORMAT(NOW(), '%Y%m'), DATE_FORMAT(oldDate, '%Y%m')) = 1 AND status != 1"); $dataCount['terday'] = $terday; $dataCount['terdayArrived'] = $terdayArrived; $dataCount['terdayOutArrived'] = $terdayOutArrived; $dataCount['tommorday'] = $tommorday; $dataCount['yesterday'] = $yesterday; $dataCount['yesterdayArrived'] = $yesterdayArrived; $dataCount['yesterdayOutArrived'] = $yesterdayOutArrived; $dataCount['currMonth'] = $currMonth; $dataCount['currMonthArrived'] = $currMonthArrived; $dataCount['currMonthOutArrived'] = $currMonthOutArrived; $dataCount['yesterMonth'] = $yesterMonth; $dataCount['yesterMonthArrived'] = $yesterMonthArrived; $dataCount['yesterMonthOutArrived'] = $yesterMonthOutArrived; if ($dataCount) return $dataCount; } private function checkCountRese ($table = null) { $this->access(); if (is_null($table)) return false; $dataCount = array(); $Model = new \Think\Model(); $todayRese = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE status = 3 AND to_days(oldDate) = to_days(now())"); $terdayRese = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE status = 3 AND to_days(now()) - to_days(oldDate) = 1"); $tommodayRese = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE status = 3 AND to_days(oldDate) - to_days(now()) = 1"); $currMonthRese = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE status = 3 AND DATE_FORMAT(oldDate, '%Y%m') = DATE_FORMAT(CURDATE(), '%Y%m')"); $yseterMonthRese = $Model->query("SELECT COUNT(*) AS count FROM $table WHERE status = 3 AND PERIOD_DIFF(DATE_FORMAT(NOW(), '%Y%m'), DATE_FORMAT(oldDate, '%Y%m')) = 1"); $dataCount['todayRese'] = $todayRese; $dataCount['terdayRese'] = $terdayRese; $dataCount['tommodayRese'] = $tommodayRese; $dataCount['currMonthRese'] = $currMonthRese; $dataCount['yesterMonthRese'] = $yseterMonthRese; if ($dataCount) return $dataCount; } public function systeminfo () { $this->access(); $staticPath = C(STATIC_PATH); $this->assign("staticPath", $staticPath); if (!$this->accSystem('personal')) { $this->display('notSystemAccess'); exit; } $username = cookie('username'); if ($username) { $this->assign('username', $username); $this->display(); } else { $this->error("请先登录", U("Home/Index/login"), 1); } } public function changePass () { $this->access(); if (is_null($_POST)) return false; $user = M('user'); $username = cookie('username'); if ( ! $username) { $this->error("请重新登录，cookie过期", U("Home/Index/login"), 1); } $result = $user->where("username = '$username'")->find(); if ($result) { $data['password'] = md5($_POST['password']); $result = $user->where("username = '$username'")->save($data); if ($result) { $this->success("修改成功", U("Home/Index/systeminfo"), 1); } } else { $this->error("修改失败", U("Home/Index/systeminfo"), 1); } } public function systemPeople () { $this->access(); $staticPath = C(STATIC_PATH); $this->assign("staticPath", $staticPath); $username = cookie('username'); $user = M('user'); $system = $user->where("username = '$username'")->field("accsystem")->select(); if ($system[0]['accsystem'] == 1) { $result = $user->select(); $this->assign('result', $result); $this->assign('username', $username); $this->display(); } else { $this->display("notSystemAccess"); } } public function updatePeople ($id = null) { $this->access(); if(is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $user = M('user'); $result = $user->where("id = '$id'")->select(); $username = cookie('username'); $this->assign('username', $username); $this->assign('id', $id); if ($result) { $this->assign('result', $result); } $this->display(); } public function updateSoure ($id = null) { $this->access(); if ( ! $_POST) return false; if (is_null($id)) return false; $userData = $_POST; for ($i = 0; $i < count($userData); $i ++) { if ($userData['rese'][$i] != null) { if ($userData['rese'][$i] == 'on') { $userData['rese'][$i] = 1; } else { $userData['rese'][$i] = 0; } } if ($userData['access'][$i] != null) { if ($userData['access'][$i] == 'on') { $userData['access'][$i] = 1; } else { $userData['access'][$i] = 0; } } if ($userData['website'][$i] != null) { if ($userData['website'][$i] == 'on') { $userData['website'][$i] = 1; } else { $userData['website'][$i] = 0; } } if ($userData['data'][$i] != null) { if ($userData['data'][$i] == 'on') { $userData['data'][$i] = 1; } else { $userData['data'][$i] = 0; } } if ($userData['setting'][$i] != null) { if ($userData['setting'][$i] == 'on') { $userData['setting'][$i] = 1; } else { $userData['setting'][$i] = 0; } } if ($userData['personal'][$i] != null) { if ($userData['personal'][$i] == 'on') { $userData['personal'][$i] = 1; } else { $userData['personal'][$i] = 0; } } if ($userData['systemManage'][$i] != null) { if ($userData['systemManage'][$i] == 'on') { $userData['systemManage'][$i] = 1; } else { $userData['systemManage'][$i] = 0; } } if ($userData['log'][$i] != null) { if ($userData['log'][$i] == 'on') { $userData['log'][$i] = 1; } else { $userData['log'][$i] = 0; } } } $data['username'] = $userData['username']; $data['password'] = md5($userData['password']); $data['yydj'] = $userData['rese'][0]; $data['yybr'] = $userData['rese'][1]; $data['cfbr'] = $userData['rese'][2]; $data['kfmx'] = $userData['rese'][3]; $data['yqs'] = $userData['rese'][4]; $data['zdy'] = $userData['rese'][5]; $data['dcbr'] = $userData['rese'][6]; $data['sjdb'] = $userData['rese'][7]; $data['sjmxwl'] = $userData['access'][0]; $data['yyxmwl'] = $userData['access'][1]; $data['sjmxdh'] = $userData['access'][2]; $data['yyxmdh'] = $userData['access'][3]; $data['wzghlb'] = $userData['website'][0]; $data['wzghsz'] = $userData['website'][1]; $data['ztbb'] = $userData['data'][0]; $data['sex'] = $userData['data'][1]; $data['old'] = $userData['data'][2]; $data['diseases'] = $userData['data'][3]; $data['fromaddress'] = $userData['data'][4]; $data['status'] = $userData['data'][5]; $data['doctor'] = $userData['data'][6]; $data['kf'] = $userData['data'][7]; $data['doctorsett'] = $userData['setting'][0]; $data['diseasessett'] = $userData['setting'][1]; $data['sortsett'] = $userData['setting'][2]; $data['hospitaldepart'] = $userData['setting'][3]; $data['seosetting'] = $userData['setting'][4]; $data['personal'] = $userData['personal'][0]; $data['changepass'] = $userData['personal'][1]; $data['changeoption'] = $userData['personal'][2]; $data['peoplesystem'] = $userData['systemManage'][0]; $data['accsystem'] = $userData['systemManage'][1]; $data['hospitallist'] = $userData['systemManage'][2]; $data['ps'] = $userData['systemManage'][3]; $data['log'] = $userData['log'][0]; $data['errorlog'] = $userData['log'][1]; $user = M('user'); $result = $user->where("id = '$id'")->save($data); if ($result) { $this->success("修改成功", U("Home/Index/updatePeople/id/$id")); } } public function deletePeople ($id = null) { $this->access(); if (is_null($id)) return false; $user = M('user'); $result = $user->where("id = '$id'")->delete(); if ($result) return ture; } public function systeminsert () { $this->access(); $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $username = cookie('username'); if ($this->accSystem('peoplesystem')) { $this->assign('username', $username); $this->display(); } else { $this->display('notSystemAccess'); } } public function peopleInsert () { $this->access(); if ( ! $_POST) return false; $user = M('user'); $data['username'] = $_POST['username']; $data['password'] = md5($_POST['password']); $result = $user->add($data); if ($result) { $this->success("添加成员成功，默认权限仅为登录", U("Home/Index/systeminsert")); } } public function exportData($id = null) { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (is_null($id)) return false; if ($this->accSystem('dcbr')) { $this->assign('id', $id); $this->display(); } else { $this->display('notSystemAccess'); } } public function exportCheck ($id = null) { $this->access(); if (is_null($id)) return false; $data = $_POST; $field = ($data['name']=='on'?'name,': null). ' ' .($data['sex']=='on'?'sex,' : null) . ' ' . ($data['old']=='on'?'old,':null) . ' ' . ($data['phone']?'phone,' : null) . '  ' . ($data['expert']?'expert,' : null) . ' ' . ($data['diseases']?'diseases,' : null) . '  ' . ($data['desc1']?'desc1,' : null) . ' ' . ($data['fromAddress']?'fromAddress,' : null) . ' ' . ($data['desc2']?'desc2,' : null) . ' ' . ($data['custService']?'custService,' : null) . ' ' . ($data['oldDate']?'oldDate,' : null) . ' ' . ($data['currentTime']?'currentTime,' : null); $tableName = $this->selectTableName($id); $startTime = $data['startDate']; $endTime = $data['endDate']; $arrived = $data['arrival']; $Model = new \Think\Model(); if ($data['date'] == 1) { if ($arrived == 0) { $sql = "SELECT $field newDate FROM $tableName WHERE unix_timestamp(newDate) > unix_timestamp('{$startTime}') AND unix_timestamp(newDate) < unix_timestamp('{$endTime}')"; } if ($arrived == 1) { $sql = "SELECT $field newDate FROM $tableName WHERE status = 1 AND unix_timestamp(newDate) > unix_timestamp('{$startTime}') AND unix_timestamp(newDate) < unix_timestamp('{$endTime}')"; } if ($arrived == 2) { $sql = "SELECT $field newDate FROM $tableName WHERE status != 1 AND unix_timestamp(newDate) > unix_timestamp('{$startTime}') AND unix_timestamp(newDate) < unix_timestamp('{$endTime}')"; } } if ($data['date'] == 0) { if ($arrived == 0) { $sql = "SELECT $field currentTime FROM $tableName WHERE unix_timestamp(currentTime) > unix_timestamp('{$startTime}') AND unix_timestamp(currentTime) < unix_timestamp('{$endTime}')"; } if ($arrived == 1) { $sql = "SELECT $field currentTime FROM $tableName WHERE status = 1 AND unix_timestamp(currentTime) > unix_timestamp('{$startTime}') AND unix_timestamp(currentTime) < unix_timestamp('{$endTime}')"; } if ($arrived == 2) { $sql = "SELECT $field currentTime FROM $tableName WHERE status != 1 AND unix_timestamp(currentTime) > unix_timestamp('{$startTime}') AND unix_timestamp(currentTime) < unix_timestamp('{$endTime}')"; } } print_r($result); $result = $Model->query($sql); if ($result) $this->assign('result', $result); $this->display(); } public function selectTableName ($id = null) { $this->access(); if (is_null($id)) return false; switch ($id) { case 1: return 'nk'; case 2: return 'fk'; case 3: return 'byby'; case 4: return 'other'; case 5: return 'jhsy'; case 6: return 'gck'; case 7: return 'wcwk'; case 8: return 'rxk'; default: echo "找不到表格,可能是表格id未找到"; break; } } public function contrast () { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if ($this->accSystem('sjdb')) { $arrival = $this->contrastSelect(); $this->assign('arrival', $arrival); $this->display(); } else { $this->display('notSystemAccess'); } } private function contrastSelect () { $Model = new \Think\Model(); $arrival = array(); $diseasesList = array('nk', 'fk', 'byby', 'other', 'jhsy', 'gck', 'wcwk', 'rxk'); for ($i = 0; $i < count($diseasesList); $i ++) { $currArrival[$diseasesList[$i]] = $Model->query("SELECT COUNT(*) AS count FROM $diseasesList[$i] WHERE status = 1 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $oneArrival[$diseasesList[$i]] = $this->monthSelect(1, 1, $diseasesList[$i]); $twoArrival[$diseasesList[$i]] = $this->monthSelect(1, 2, $diseasesList[$i]); $threeArrival[$diseasesList[$i]] = $this->monthSelect(1, 3, $diseasesList[$i]); $fourArrival[$diseasesList[$i]] = $this->monthSelect(1, 4, $diseasesList[$i]); $fiveArrival[$diseasesList[$i]] = $this->monthSelect(1, 5, $diseasesList[$i]); $sixArrival[$diseasesList[$i]] = $this->monthSelect(1, 6, $diseasesList[$i]); } $arrival['currArrival'] = $currArrival; $arrival['oneArrival'] = $oneArrival; $arrival['twoArrival'] = $twoArrival; $arrival['threeArrival'] = $threeArrival; $arrival['fourArrival'] = $fourArrival; $arrival['fiveArrival'] = $fiveArrival; $arrival['sixArrival'] = $sixArrival; return $arrival; } public function allTable ($id = null) { $this->access(); if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (!$this->accSystem('ztbb')) { $this->display('notSystemAccess'); exit; } $tableName = $this->selectTableName($id); $tableFont = $this->selectFont($id); $data = array(); $month = array(); $Model = new \Think\Model(); $currYearReser = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 3 AND YEAR(currentTime) = YEAR(NOW())"); $currYearAdvan = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 0 AND YEAR(currentTime) = YEAR(NOW())"); $currYearArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 1 AND YEAR(currentTime) = YEAR(NOW())"); $currYearOutArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 2 AND YEAR(currentTime) = YEAR(NOW())"); $lastYearReser = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 3 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $lastYearAdvan = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 0 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $lastYearArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 1 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $lastYEarOutArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 2 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $beforeYearReser = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 3 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $beforeYearAdvan = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 0 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $beforeYearArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 1 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $beforeYearOutArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 2 AND YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $currMonthReser = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 3 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthAdvan = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 0 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 1 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthOutArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 2 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $oneMonthReser = $this->monthSelect(3, 1, $tableName); $oneMonthAdvan = $this->monthSelect(0, 1, $tableName); $oneMonthArrival = $this->monthSelect(1, 1, $tableName); $oneMonthOutArrival = $this->monthSelect(2, 1, $tableName); $twoMonthReser = $this->monthSelect(3, 2, $tableName); $twoMonthAdvan = $this->monthSelect(0, 2, $tableName); $twoMonthArrival = $this->monthSelect(1, 2, $tableName); $twoMonthOutArrival = $this->monthSelect(2, 2, $tableName); $threeMonthReser = $this->monthSelect(3, 3, $tableName); $threeMonthAdvan = $this->monthSelect(0, 3, $tableName); $threeMonthArrival = $this->monthSelect(1, 3, $tableName); $threeMonthOutArrival = $this->monthSelect(2, 3, $tableName); $fourMonthReser = $this->monthSelect(3, 4, $tableName); $fourMonthAdvan = $this->monthSelect(0, 4, $tableName); $fourMonthArrival = $this->monthSelect(1, 4, $tableName); $fourMonthOutArrival = $this->monthSelect(2, 4, $tableName); $fiveMonthReser = $this->monthSelect(3, 5, $tableName); $fiveMonthAdvan = $this->monthSelect(0, 5, $tableName); $fiveMonthArrival = $this->monthSelect(1, 5, $tableName); $fiveMonthOutArrival = $this->monthSelect(2, 5, $tableName); $sixMonthReser = $this->monthSelect(3, 6, $tableName); $sixMonthAdvan = $this->monthSelect(0, 6, $tableName); $sixMonthArrival = $this->monthSelect(1, 6, $tableName); $sixMonthOutArrival = $this->monthSelect(2, 6, $tableName); $data['currYearReser'] = $currYearReser; $data['currYearAdvan'] = $currYearAdvan; $data['currYearArrival'] = $currYearArrival; $data['currYearOutArrival'] = $currYearOutArrival; $data['currYear'] = "今年"; $data['lastYearReser'] = $lastYearReser; $data['lastYearAdvan'] = $lastYearAdvan; $data['lastYearArrival'] = $lastYearArrival; $data['lastYearOutArrival'] = $lastYEarOutArrival; $data['lastYear'] = "去年"; $data['beforeYearReser'] = $beforeYearReser; $data['beforeYearAdvan'] = $beforeYearAdvan; $data['beforeYearArrival'] = $beforeYearArrival; $data['beforeYearOutArrival'] = $beforeYearOutArrival; $data['beforeYear'] = "前年"; $month['currMonthReser'] = $currMonthReser; $month['currMonthAdvan'] = $currMonthAdvan; $month['currMonthArrival'] = $currMonthArrival; $month['currMonthOutArrival'] = $currMonthOutArrival; $month['currMonth'] = \date('Y-m'); $month['oneMonthReser'] = $oneMonthReser; $month['oneMonthAdvan'] = $oneMonthAdvan; $month['oneMonthArrival'] = $oneMonthArrival; $month['oneMonthOutArrival'] = $oneMonthOutArrival; $month['oneMonth'] = \date('Y-m', strtotime('-1 month')); $month['twoMonthReser'] = $twoMonthReser; $month['twoMonthAdvan'] = $twoMonthAdvan; $month['twoMonthArrival'] = $twoMonthArrival; $month['twoMonthOutArrival'] = $twoMonthOutArrival; $month['twoMonth'] = \date('Y-m', strtotime('-2 month')); $month['threeMonthReser'] = $threeMonthReser; $month['threeMonthAdvan'] = $threeMonthAdvan; $month['threeMonthArrival'] = $threeMonthArrival; $month['threeMonthOutArrival'] = $threeMonthOutArrival; $month['threeMonth'] = \date('Y-m', strtotime('-3 month')); $month['fourMonthReser'] = $fourMonthReser; $month['fourMonthAdvan'] = $fourMonthAdvan; $month['fourMonthArrival'] = $fourMonthArrival; $month['fourMonthOutArrival'] = $fourMonthOutArrival; $month['fourMonth'] = \date('Y-m', strtotime('-4 month')); $month['fiveMonthReser'] = $fiveMonthReser; $month['fiveMonthAdvan'] = $fiveMonthAdvan; $month['fiveMonthArrival'] = $fiveMonthArrival; $month['fiveMonthOutArrival'] = $fiveMonthOutArrival; $month['fiveMonth'] = \date('Y-m', strtotime('-5 month')); $month['sixMonthReser'] = $sixMonthReser; $month['sixMonthAdvan'] = $sixMonthAdvan; $month['sixMonthArrival'] = $sixMonthArrival; $month['sixMonthOutArrival'] = $sixMonthOutArrival; $month['sixMonth'] = \date('Y-m', strtotime('-6 month')); $this->assign('month', $month); $this->assign('tableFont', $tableFont); $this->assign('data', $data); $this->display(); } private function notSystemAccess () { $this->display(); } private function access () { $cookieUsername = cookie('username'); if ( ! $cookieUsername) { $this->error('请先登录', U("Home/Index/login")); } } private function selectFont ($id = null) { if (is_null($id)) return false; switch ($id) { case 1: return '广元协和医院男科'; case 2: return '广元协和医院妇科'; case 3: return '广元协和医院不孕不育'; case 4: return '广元协和医院其他'; case 5: return '广元协和医院计划生育'; case 6: return '广元协和医院肛肠科'; case 7: return '广元协和医院微创外科'; case 8: return '广元协和医院乳腺科'; default: echo "找不到表格,可能是表格id未找到"; break; } } private function monthSelect ($status = null, $month = null, $tableName) { if (is_null($status)) return false; if (is_null($month)) return false; $Model = new \Think\Model(); $monthdata = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = '{$status}' AND date_format(currentTime, '%Y-%m') = date_format(DATE_SUB(curdate(), INTERVAL {$month} MONTH), '%Y-%m')"); return $monthdata; } public function diseases ($id = null) { if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (!$this->accSystem('diseasessett')) { $this->display('notSystemAccess'); exit; } $tableFont = $this->selectFont($id); $user = M('alldiseases'); $result = $user->where("pid = $id")->field(array('id', 'diseases', 'currTime'))->select(); if ($result) $this->assign('result', $result); $this->access(); $username = cookie('username'); $this->assign('username', $username); $this->assign('tableFont', $tableFont); $this->display(); } public function diseasesDelete ($id = null) { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $this->access(); if (is_null($id)) return false; $user = M('alldiseases'); $result = $user->where("id = $id")->delete(); print_r($result); } public function diseasesUpdate ($id = null) { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $this->access(); $username = cookie('username'); $this->assign('username', $username); if (is_null($id)) return false; $this->assign(); $user = M('alldiseases'); $result = $user->where("id = '$id'")->field('diseases')->select(); $this->assign('result', $result); $this->assign('id', $id); $this->display(); } public function diseaseSource () { $diseases['diseases'] = $_POST['diseases']; $id = $_GET['id']; $user = M('alldiseases'); $result = $user->where("id = $id")->save($diseases); if ($result) { echo "<p style='color:green;'>修改成功</p>"; } else { echo "<p style='color:red;'>修改失败</p>"; } } public function diseasesadd ($id = null) { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $this->access(); if (is_null($id)) return false; $username = cookie('username'); $this->assign('username', $username); $this->assign('id', $id); $this->display(); } public function diseaseaddSource ($id = null) { if (is_null($id)) return false; $diseases['diseases'] = $_POST['diseases']; $diseases['pid'] = $id; $user = M('alldiseases'); $result = $user->add($diseases); if ($result) { echo "<p style='color:green;'>添加成功</p>"; } else { echo "<p style='color:red;'>添加失败</p>"; } } public function fromaddress () { $this->access(); $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (!$this->accSystem('sortsett')) { $this->display('notSystemAccess'); exit; } $username = cookie('username'); $this->assign('username', $username); $user = M('fromaddress'); $result = $user->select(); $this->assign('result', $result); $this->display(); } public function fromaddressUpdate ($id = null) { $this->access(); if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $username = cookie('username'); $user = M('fromaddress'); $result = $user->where("id = $id")->field('fromaddress')->select(); $this->assign('id', $id); $this->assign('username', $username); $this->assign('result', $result); $this->display(); } public function fromaddressSource ($id = null) { $this->access(); if (is_null($id)) return false; $fromaddress['fromaddress'] = $_POST['fromaddress']; $user = M('fromaddress'); $result = $user->where("id = $id")->save($fromaddress); if ($result) { echo "<p style='color:green;'>修改成功</p>"; } else { echo "<p style='color:red;'>修改失败</p>"; } } public function fromaddressDelete ($id = null) { $this->access(); if (is_null($id)) return false; $user = M('fromaddress'); $result = $user->where("id = $id")->delete(); print_r($result); } public function fromaddressadd ($id = null) { $this->access(); if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $username = cookie('username'); $this->assign('username', $username); $this->assign('id', $id); $this->display(); } public function fromaddressaddSource () { $this->assign(); $fromaddress['fromaddress'] = $_POST['fromaddress']; $user = M('fromaddress'); $result = $user->add($fromaddress); if ($result) { echo "<p style='color:green;'>添加成功</p>"; } else { echo "<p style='color:red;'>添加失败</p>"; } } public function sex ($id = null) { $this->access(); if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); if (!$this->accSystem('sex')) { $this->display('notSystemAccess'); exit; } $tableName = $this->selectFont($id); $tableFont = $this->selectTableName($id); $yeardata = $this->sexyear($tableFont); $this->assign('tableName', $tableName); $this->assign('yeardata', $yeardata); $this->display(); } private function checkCountMonth ($table) { $this->access(); $user = M('user'); $nameList = $user->field('username')->select(); return $nameList; } public function accSystem ($field = null) { if (is_null($field)) return false; $this->access(); $username = cookie('username'); $user = M('user'); $result = $user->where("username = '{$username}'")->select(); if ($result[0]["$field"] != 1 ) { return false; } else { return true; } } public function hospital () { if (! $this->accSystem('hospitallist')) { $this->display('notSystemAccess'); exit; } $department = M('department'); $departmentList = $department->select(); if ($departmentList) { $staticPath = C('STATIC_PATH'); $this->assign('staticPath', $staticPath); $this->assign('departmentList', $departmentList); $this->display(); } } public function monthlyTrend ($id) { if (! $this->accSystem('yqs')) { $this->display('notSystemAccess'); exit; } if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $tableName = $this->selectTableName($id); $tableFont = $this->selectFont($id); $Model = new \Think\Model(); $currMonthReser = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 3 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthAdvan = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 0 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 1 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthOutArrival = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 2 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthTotal = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 4 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthHalf = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 5 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $currMonthTreat = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE status = 6 AND date_format(currentTime, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')"); $oneMonthReser = $this->monthSelect(3, 1, $tableName); $oneMonthAdvan = $this->monthSelect(0, 1, $tableName); $oneMonthArrival = $this->monthSelect(1, 1, $tableName); $oneMonthOutArrival = $this->monthSelect(2, 1, $tableName); $oneMonthTotal = $this->monthSelect(4, 1, $tableName); $oneMonthHalf = $this->monthSelect(5, 1, $tableName); $oneMonthTreat = $this->monthSelect(6, 1, $tableName); $twoMonthReser = $this->monthSelect(3, 2, $tableName); $twoMonthAdvan = $this->monthSelect(0, 2, $tableName); $twoMonthArrival = $this->monthSelect(1, 2, $tableName); $twoMonthOutArrival = $this->monthSelect(2, 2, $tableName); $twoMonthTotal = $this->monthSelect(4, 2, $tableName); $twoMonthHalf = $this->monthSelect(5, 2, $tableName); $twoMonthTreat = $this->monthSelect(6, 2, $tableName); $threeMonthReser = $this->monthSelect(3, 3, $tableName); $threeMonthAdvan = $this->monthSelect(0, 3, $tableName); $threeMonthArrival = $this->monthSelect(1, 3, $tableName); $threeMonthOutArrival = $this->monthSelect(2, 3, $tableName); $threeMonthTotal = $this->monthSelect(4, 3, $tableName); $threeMonthHalf = $this->monthSelect(5, 3, $tableName); $threeMonthTreat = $this->monthSelect(6, 3, $tableName); $fourMonthReser = $this->monthSelect(3, 4, $tableName); $fourMonthAdvan = $this->monthSelect(0, 4, $tableName); $fourMonthArrival = $this->monthSelect(1, 4, $tableName); $fourMonthOutArrival = $this->monthSelect(2, 4, $tableName); $fourMonthTotal = $this->monthSelect(4, 4, $tableName); $fourMonthHalf = $this->monthSelect(5, 4, $tableName); $fourMonthTreat = $this->monthSelect(6, 4, $tableName); $fiveMonthReser = $this->monthSelect(3, 5, $tableName); $fiveMonthAdvan = $this->monthSelect(0, 5, $tableName); $fiveMonthArrival = $this->monthSelect(1, 5, $tableName); $fiveMonthOutArrival = $this->monthSelect(2, 5, $tableName); $fiveMonthTotal = $this->monthSelect(4, 5, $tableName); $fiveMonthHalf = $this->monthSelect(5, 5, $tableName); $fiveMonthTreat = $this->monthSelect(6, 5, $tableName); $sixMonthReser = $this->monthSelect(3, 6, $tableName); $sixMonthAdvan = $this->monthSelect(0, 6, $tableName); $sixMonthArrival = $this->monthSelect(1, 6, $tableName); $sixMonthOutArrival = $this->monthSelect(2, 6, $tableName); $sixMonthTotal = $this->monthSelect(4, 6, $tableName); $sixMonthHalf = $this->monthSelect(5, 6, $tableName); $sixMonthTreat = $this->monthSelect(6, 6, $tableName); $month['oneMonthReser'] = $oneMonthReser; $month['oneMonthAdvan'] = $oneMonthAdvan; $month['oneMonthArrival'] = $oneMonthArrival; $month['oneMonthOutArrival'] = $oneMonthOutArrival; $month['oneMonthTotal'] = $oneMonthTotal; $month['oneMonthHalf'] = $oneMonthHalf; $month['oneMonthTreat'] = $oneMonthTreat; $month['oneMonth'] = date('Y-m', strtotime('-1 month')); $month['twoMonthReser'] = $twoMonthReser; $month['twoMonthAdvan'] = $twoMonthAdvan; $month['twoMonthArrival'] = $twoMonthArrival; $month['twoMonthOutArrival'] = $twoMonthOutArrival; $month['twoMonthTotal'] = $twoMonthTotal; $month['twoMonthHalf'] = $twoMonthHalf; $month['twoMonthTreat'] = $twoMonthTreat; $month['twoMonth'] = date('Y-m', strtotime('-2 month')); $month['threeMonthReser'] = $threeMonthReser; $month['threeMonthAdvan'] = $threeMonthAdvan; $month['threeMonthArrival'] = $threeMonthArrival; $month['threeMonthOutArrival'] = $threeMonthOutArrival; $month['threeMonthTotal'] = $threeMonthTotal; $month['threeMonthHalf'] = $threeMonthHalf; $month['threeMonthTreat'] = $threeMonthTreat; $month['threeMonth'] = date('Y-m', strtotime('-3 month')); $month['fourMonthReser'] = $fourMonthReser; $month['fourMonthAdvan'] = $fourMonthAdvan; $month['fourMonthArrival'] = $fourMonthArrival; $month['fourMonthOutArrival'] = $fourMonthOutArrival; $month['fourMonthTotal'] = $fourMonthTotal; $month['fourMonthHalf'] = $fourMonthHalf; $month['fourMonthTreat'] = $fourMonthTreat; $month['fourMonth'] = date('Y-m', strtotime('-4 month')); $month['fiveMonthReser'] = $fiveMonthReser; $month['fiveMonthAdvan'] = $fiveMonthAdvan; $month['fiveMonthArrival'] = $fiveMonthArrival; $month['fiveMonthOutArrival'] = $fiveMonthOutArrival; $month['fiveMonthTotal'] = $fiveMonthTotal; $month['fiveMonthHalf'] = $fiveMonthHalf; $month['fiveMonthTreat'] = $fiveMonthTreat; $month['fiveMonth'] = date('Y-m', strtotime('-5 month')); $month['sixMonthReser'] = $sixMonthReser; $month['sixMonthAdvan'] = $sixMonthAdvan; $month['sixMonthArrival'] = $sixMonthArrival; $month['sixMonthOutArrival'] = $sixMonthOutArrival; $month['sixMonthTotal'] = $sixMonthTotal; $month['sixMonthHalf'] = $sixMonthHalf; $month['sixMonthTreat'] = $sixMonthTreat; $month['sixMonth'] = date('Y-m', strtotime('-6 month')); $this->assign('month', $month); $this->assign('id', $id); $this->assign('currMonthReser', $currMonthReser); $this->assign('currMonthAdvan', $currMonthAdvan); $this->assign('currMonthArrival', $currMonthArrival); $this->assign('currMonthOutArrival', $currMonthOutArrival); $this->assign('currMonthTotal', $currMonthTotal); $this->assign('currMonthHalf', $currMonthHalf); $this->assign('currMonthTreat', $currMonthTreat); $this->display(); } private function sexyear ($tableName) { $yearSex = array(); $Model = new \Think\Model(); $currSex = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE YEAR(currentTime) = YEAR(NOW())"); $currBoy = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE sex = '男' AND YEAR(currentTime) = YEAR(NOW())"); $currGirl = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE sex = '女' AND YEAR(currentTime) = YEAR(NOW())"); $lastSex = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $lastBoy = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE sex = '男' AND YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $lastGirl = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE sex = '女' AND YEAR(currentTime) = YEAR(date_sub(now(), interval 1 year))"); $beforeSex = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $beforeBoy = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE sex = '男' AND YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $beforeGirl = $Model->query("SELECT COUNT(*) AS count FROM $tableName WHERE sex = '女' AND YEAR(currentTime) = YEAR(date_sub(now(), interval 2 year))"); $yearSex['currSex'] = $currSex; $yearSex['currBoy'] = $currBoy; $yearSex['currGirl'] = $currGirl; $yearSex['lastSex'] = $lastSex; $yearSex['lastBoy'] = $lastBoy; $yearSex['lastGirl'] = $lastGirl; $yearSex['beforeSex'] = $beforeSex; $yearSex['beforeBoy'] = $beforeBoy; $yearSex['beforeGirl'] = $beforeGirl; if ($yearSex != null) return $yearSex; } public function type ($id = null) { if (is_null($id)) return false; $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $type = array(); $Model = new \Think\Model(); $diseases = $Model->query("SELECT diseases FROM alldiseases WHERE pid = {$id}"); $diseasesSort = array(); for ($i = 0; $i < count($diseases); $i ++) { array_push($diseasesSort, $diseases[$i]['diseases']); } $result = array(); $tableName = $this->selectTableName($id); for ($i = 0; $i < count($diseasesSort); $i ++) { foreach ($Model->query("SELECT COUNT(*) AS {$diseasesSort[$i]} FROM {$tableName} WHERE diseases = {$i}") AS $key => $val) { foreach ($val as $k) { $result[$i] = $k; } } } $this->assign('result', $result); $this->display(); } public function errorlog () { $staticPath = C(STATIC_PATH); $this->assign('staticPath', $staticPath); $user = M('login_log'); $log = $user->select(); $this->assign('log', $log); $this->display(); } } 